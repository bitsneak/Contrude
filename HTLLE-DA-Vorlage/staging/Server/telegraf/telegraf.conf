# Global Agent Configuration
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  quiet = false
  logfile = "/var/log/telegraf/telegraf.log"

# Input Plugin Configuration
[[inputs.mqtt_consumer]]
  servers = ["${MQTT_BROKER}:${MQTT_PORT}"]
  topics = ["contrude/#"]
  username = "${MQTT_USER}"
  password = "${MQTT_PASSWORD}"
  data_format = "value"
  data_type = "float"

# Extract the whole topic field into temporary tags
[[processors.regex]]
  [[processors.regex.tags]]
    key = "topic"
    pattern = "^contrude/(\\d+)/(\\d+)/([^/]+)$"
    replacement = "$1,$2,$3" # Comma-separated values for temporary processing

# Split each part from the temporary tag
## Match to the ship tag
[[processors.regex]]
  [[processors.regex.tags]]
    key = "topic"
    pattern = "^([^,]+),([^,]+),([^,]+)$" # Matches the comma-separated format
    replacement = "$1"
    result_key = "ship" # Creates the ship tag

## Match to the container tag
[[processors.regex]]
  [[processors.regex.tags]]
    key = "topic"
    pattern = "^([^,]+),([^,]+),([^,]+)$" # Matches the comma-separated format
    replacement = "$2"
    result_key = "container" # Creates the container tag

## Match to the sensor tag
[[processors.regex]]
  [[processors.regex.tags]]
    key = "topic"
    pattern = "^([^,]+),([^,]+),([^,]+)$" # Matches the comma-separated format
    replacement = "$3"
    result_key = "sensor" # Creates the sensor tag

# Output Plugin Configuration
## Temperature output
[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}:${INFLUX_PORT}"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${TEMPERATURE_BUCKET}"  # Bucket for temperature data
  precision = "s"
  
  # Only pass data where the sensor tag is temperature
  [outputs.influxdb_v2.tagpass]
    sensor = ["${TEMPERATURE_TAGPASS}"]

## Humidity output
[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}:${INFLUX_PORT}"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${HUMIDITY_BUCKET}"  # Bucket for humidity data
  precision = "s"
  
  # Only pass data where the sensor tag is humidity
  [outputs.influxdb_v2.tagpass]
    sensor = ["${HUMIDITY_TAGPASS}"]

## Air pressure output
[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}:${INFLUX_PORT}"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${AIR_PRESSURE_BUCKET}"  # Bucket for air pressure data
  precision = "s"
  
  # Only pass data where the sensor tag is pressure
  [outputs.influxdb_v2.tagpass]
    sensor = ["${AIR_PRESSURE_TAGPASS}"]

## Vibration output
[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}:${INFLUX_PORT}"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${VIBRATION_BUCKET}"  # Bucket for vibration data
  precision = "s"
  
  # Only pass data where the sensor tag is vibration
  [outputs.influxdb_v2.tagpass]
    sensor = ["${VIBRATION_TAGPASS}"]

## Longitude output
[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}:${INFLUX_PORT}"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${LONGITUDE_BUCKET}"  # Bucket for longitude data
  precision = "s"
  
  # Only pass data where the sensor tag is longitude
  [outputs.influxdb_v2.tagpass]
    sensor = ["${LONGITUDE_TAGPASS}"]

## Latitude output
[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}:${INFLUX_PORT}"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${LATITUDE_BUCKET}"  # Bucket for latitude data
  precision = "s"
  
  # Only pass data where the sensor tag is latitude
  [outputs.influxdb_v2.tagpass]
    sensor = ["${LATITUDE_TAGPASS}"]

## Altitude output
[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}:${INFLUX_PORT}"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${ALTITUDE_BUCKET}"  # Bucket for altitude data
  precision = "s"
  
  # Only pass data where the sensor tag is altitude
  [outputs.influxdb_v2.tagpass]
    sensor = ["${ALTITUDE_TAGPASS}"]